
i2c_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002c4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f0f  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000892  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069e  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b1  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000513  00000000  00000000  000028f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:

uint8_t i2cReadNoAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN));
  i2cWaitForComplete();
  return (TWDR);
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <i2cWaitForComplete>:
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <i2cWaitForComplete+0x4>
  c2:	08 95       	ret

000000c4 <i2cStart>:
  c4:	84 ea       	ldi	r24, 0xA4	; 164
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
  ce:	08 95       	ret

000000d0 <i2cSend>:

void i2cSend(uint8_t data) {
  TWDR = data;
  d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = (_BV(TWINT) | _BV(TWEN));                  /* init and enable */
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  i2cWaitForComplete();
  da:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
  de:	08 95       	ret

000000e0 <main>:
#include <avr/io.h>
#include "PCF8754.h"

int main(void)
{
	LCD_Init();
  e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Init>
    LCD_print("HELLO");
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_print>
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0xc>

000000ee <LCD_send4bits>:
	_delay_ms(2);
	
}

void LCD_send4bits(uint8_t cmd, uint8_t mode) {
	if(cmd & 0x01) {
  ee:	80 ff       	sbrs	r24, 0
  f0:	06 c0       	rjmp	.+12     	; 0xfe <LCD_send4bits+0x10>
		i2cData |= D4;
  f2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  f6:	90 61       	ori	r25, 0x10	; 16
  f8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
  fc:	05 c0       	rjmp	.+10     	; 0x108 <LCD_send4bits+0x1a>
	} else {
		i2cData &= ~D4;
  fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 102:	9f 7e       	andi	r25, 0xEF	; 239
 104:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
	}
	if(cmd & 0x02) {
 108:	81 ff       	sbrs	r24, 1
 10a:	06 c0       	rjmp	.+12     	; 0x118 <LCD_send4bits+0x2a>
		i2cData |= D5;
 10c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 110:	90 62       	ori	r25, 0x20	; 32
 112:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 116:	05 c0       	rjmp	.+10     	; 0x122 <LCD_send4bits+0x34>
	} else {
		i2cData &= ~D5;
 118:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 11c:	9f 7d       	andi	r25, 0xDF	; 223
 11e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
	}
	if(cmd & 0x04) {
 122:	82 ff       	sbrs	r24, 2
 124:	06 c0       	rjmp	.+12     	; 0x132 <LCD_send4bits+0x44>
		i2cData |= D6;
 126:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 12a:	90 64       	ori	r25, 0x40	; 64
 12c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 130:	05 c0       	rjmp	.+10     	; 0x13c <LCD_send4bits+0x4e>
	} else {
		i2cData &= ~D6;
 132:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 136:	9f 7b       	andi	r25, 0xBF	; 191
 138:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
	}
	if(cmd & 0x08) {
 13c:	83 ff       	sbrs	r24, 3
 13e:	06 c0       	rjmp	.+12     	; 0x14c <LCD_send4bits+0x5e>
		i2cData |= D7;
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 144:	80 68       	ori	r24, 0x80	; 128
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <LCD_send4bits+0x68>
	} else {
		i2cData &= ~D7;
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	if(mode == 1) {
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	31 f4       	brne	.+12     	; 0x166 <LCD_send4bits+0x78>
		i2cData |= RS;
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 164:	05 c0       	rjmp	.+10     	; 0x170 <LCD_send4bits+0x82>
	} else {
		i2cData &= ~RS;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	
	i2cSend(i2cData);
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 174:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cSend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f e8       	ldi	r24, 0x8F	; 143
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_send4bits+0x8e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_send4bits+0x94>
 182:	00 00       	nop
	_delay_us(100);
	i2cData &= ~EN;
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	i2cSend(i2cData);
 18e:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cSend>
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_send4bits+0xa6>
 198:	00 00       	nop
	_delay_us(1);
	i2cData |= EN;
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	i2cSend(i2cData);
 1a4:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cSend>
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_send4bits+0xbc>
 1ae:	00 00       	nop
	_delay_us(1);
	i2cData &= ~EN;
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	i2cSend(i2cData);
 1ba:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cSend>
 1be:	8f e8       	ldi	r24, 0x8F	; 143
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_send4bits+0xd4>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_send4bits+0xda>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <LCD_sendCmd>:
	_delay_us(100);
	
}

void LCD_sendCmd(uint8_t cmd) {
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
	LCD_send4bits(cmd >> 4, 0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	82 95       	swap	r24
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
	LCD_send4bits(0x0f & cmd, 0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	8c 2f       	mov	r24, r28
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <LCD_Init>:


uint8_t i2cData = 0b00001000;

void LCD_Init() {
	initI2C();
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
	i2cStart();
 1ec:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStart>
	i2cSend(PCF8754_ADDR);
 1f0:	8e e4       	ldi	r24, 0x4E	; 78
 1f2:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cSend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f e1       	ldi	r24, 0x1F	; 31
 1f8:	9e e4       	ldi	r25, 0x4E	; 78
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_Init+0x12>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCD_Init+0x18>
 200:	00 00       	nop
	
	//Initialization routine in datasheet figure 24
	_delay_ms(5);
	LCD_send4bits(3, 0);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	9e e4       	ldi	r25, 0x4E	; 78
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Init+0x26>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_Init+0x2c>
 214:	00 00       	nop
	_delay_ms(5);
	LCD_send4bits(3, 0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9c e9       	ldi	r25, 0x9C	; 156
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Init+0x3a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Init+0x40>
 228:	00 00       	nop
	_delay_ms(10);
	LCD_send4bits(3, 0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8f e8       	ldi	r24, 0x8F	; 143
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Init+0x4e>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Init+0x54>
 23c:	00 00       	nop
	_delay_us(100);
	LCD_send4bits(2, 0);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
 246:	8f e8       	ldi	r24, 0x8F	; 143
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_Init+0x62>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_Init+0x68>
 250:	00 00       	nop
	_delay_us(100);
	
	LCD_sendCmd(FUNC_SET);
 252:	88 e2       	ldi	r24, 0x28	; 40
 254:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_sendCmd>
	LCD_sendCmd(ENTRY_MOD_SET);
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_sendCmd>
	LCD_sendCmd(DISPLAY_ON);
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_sendCmd>
	LCD_sendCmd(CLEAR_DISPLAY);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_sendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9f e1       	ldi	r25, 0x1F	; 31
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_Init+0x86>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_Init+0x8c>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <LCD_sendData>:
void LCD_sendCmd(uint8_t cmd) {
	LCD_send4bits(cmd >> 4, 0);
	LCD_send4bits(0x0f & cmd, 0);
}

void LCD_sendData(uint8_t data) {
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
	LCD_send4bits(data >> 4, 1);
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	82 95       	swap	r24
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
	LCD_send4bits(0x0f & data, 1);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	8c 2f       	mov	r24, r28
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	0e 94 77 00 	call	0xee	; 0xee <LCD_send4bits>
}
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <LCD_print>:

void LCD_print(const char myString[]) {
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	fc 01       	movw	r30, r24
	uint8_t i = 0;
	while (myString[i]) {
 29c:	80 81       	ld	r24, Z
 29e:	88 23       	and	r24, r24
 2a0:	59 f0       	breq	.+22     	; 0x2b8 <LCD_print+0x24>
 2a2:	8f 01       	movw	r16, r30
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_sendData(myString[i]);
 2a6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_sendData>
		i++;
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
	LCD_send4bits(0x0f & data, 1);
}

void LCD_print(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 2ac:	f8 01       	movw	r30, r16
 2ae:	ec 0f       	add	r30, r28
 2b0:	f1 1d       	adc	r31, r1
 2b2:	80 81       	ld	r24, Z
 2b4:	81 11       	cpse	r24, r1
 2b6:	f7 cf       	rjmp	.-18     	; 0x2a6 <LCD_print+0x12>
		LCD_sendData(myString[i]);
		i++;
	}
}
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
